"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var CodeHighLightComponent = (function () {
    function CodeHighLightComponent(elemRef) {
        this.elemRef = elemRef;
    }
    CodeHighLightComponent.prototype.ngOnInit = function () {
        /*console.log(Prism);
        console.log(Prism.highlight);
        let codeElem=this.elemRef.nativeElement.querySelector('code');
       // let text=codeElem.innerHTML;
        codeElem.className='language-html';
        codeElem.textContent='&lt;h1 class="test"&gt;1&lt;/h1&gt;';
        let fn=Prism.highlightElement;
        fn(codeElem);*/
        //异步请求代码
        /*var src ='modules/feedback/pop-demo/pop-demo.component.html';
        var language;
        language = 'html';
        var code = this.elemRef.nativeElement.querySelector('code');
        code.className = 'language-' + language;
        code.textContent = 'Loading…';
        var xhr = new XMLHttpRequest();
        xhr.open('GET', src, true);
        xhr.onreadystatechange = function () {
          if (xhr.readyState == 4) {
    
            if (xhr.status < 400 && xhr.responseText) {
              code.textContent = xhr.responseText;
              let fn=PrismPlugin['prism'].highlightElement
              fn(code);
            }
            else if (xhr.status >= 400) {
              code.textContent = '✖ Error ' + xhr.status + ' while fetching file: ' + xhr.statusText;
            }
            else {
              code.textContent = '✖ Error: File does not exist or is empty';
            }
          }
        };
    
        xhr.send(null);*/
    };
    return CodeHighLightComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], CodeHighLightComponent.prototype, "language", void 0);
CodeHighLightComponent = __decorate([
    core_1.Component({
        selector: 'code-high-light',
        templateUrl: './code-high-light.component.html',
        styleUrls: ['./code-high-light.component.less']
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], CodeHighLightComponent);
exports.CodeHighLightComponent = CodeHighLightComponent;
//# sourceMappingURL=code-high-light.component.js.map