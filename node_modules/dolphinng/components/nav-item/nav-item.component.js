"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
//declare var $:any;  //定义jquery
var NavItemComponent = (function () {
    function NavItemComponent(elemRef, router) {
        this.elemRef = elemRef;
        this.router = router;
        this.haveChild = false;
        this.childrenActive = false;
    }
    /**
     * 获取dom相对浏览器的位置
     * @param obj
     * @returns {{left: number, top: number}}
       */
    NavItemComponent.prototype.getPosition = function (obj) {
        var topValue = 0, leftValue = 0;
        while (obj) {
            leftValue += obj.offsetLeft;
            topValue += obj.offsetTop;
            obj = obj.offsetParent;
        }
        return { left: leftValue, top: topValue };
    };
    NavItemComponent.prototype.activeNavItem = function () {
        console.log('get emit');
        this.addClass(this.rootElem, 'active');
    };
    NavItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.checkChild();
        var wrap = document.querySelector('nav-wrap');
        this.rootElem = this.elemRef.nativeElement.querySelector('li');
        if (this.hasActiveChildren()) {
            this.childrenActive = true;
            this.addClass(this.rootElem, 'active');
        }
        this.rootElem.addEventListener('click', function (ev) {
            var hasClass = _this.hasClass(_this.rootElem, 'active');
            var navItems = document.querySelectorAll('nav-item>li');
            if (navItems.length) {
                for (var i = 0, len = navItems.length; i < len; i++) {
                    _this.removeClass(navItems[i], 'active');
                }
            }
            var wouldActive = true;
            var url = _this.router.url, href, linkElem = _this.rootElem.querySelector('a');
            if (linkElem) {
                href = linkElem.getAttribute('href');
            }
            if (hasClass) {
                if (!_this.isAsideFolded()) {
                    wouldActive = (href !== url) ? (_this.haveChild ? (href ? true : false) : false) : (_this.haveChild ? false : true);
                }
            }
            if (wouldActive) {
                _this.addClass(_this.rootElem, 'active');
            }
        });
        this.rootElem.addEventListener('mouseover', function (ev) {
            var target = _this.rootElem;
            if (!_this.isAsideFolded()) {
                return;
            }
            if (!_this.hasClass(target, 'nav-item-hover')) {
                _this.addClass(target, 'nav-item-hover');
            }
            else {
                return;
            }
            var pos = _this.getPosition(target), wrapPos;
            var navWrap = document.querySelector('.navi-wrap');
            if (navWrap) {
                wrapPos = _this.getPosition(navWrap);
            }
            var subNavWrap = target.querySelector('.nav.nav-sub');
            var w = target.offsetWidth;
            var h = target.offsetHeight;
            var win_h = document.body.clientHeight;
            if (subNavWrap) {
                var subWrapHeight = subNavWrap.offsetHeight;
                var top_1 = pos.top;
                subNavWrap.style.left = pos.left + w + 'px';
                if (win_h - pos.top < subWrapHeight) {
                    if (win_h - pos.top + h < subWrapHeight) {
                        top_1 = wrapPos.top || 0; //50是头部高度
                    }
                    else {
                        top_1 = pos.top - subWrapHeight + h;
                    }
                }
                subNavWrap.style.top = top_1 + 'px';
                subNavWrap.style.maxHeight = win_h - wrapPos.top + 'px';
                subNavWrap.style.overflowY = 'auto';
            }
            target = null;
        });
        this.rootElem.addEventListener('mouseleave', function (ev) {
            if (!_this.isAsideFolded()) {
                return;
            }
            var classList = _this.rootElem.className.split(/\s+/);
            if (classList.indexOf('nav-item-hover') >= 0) {
                _this.removeClass(_this.rootElem, 'nav-item-hover');
            }
            var subNavWrap = _this.rootElem.querySelector('.nav.nav-sub');
            if (subNavWrap) {
                subNavWrap.style.maxHeight = 'inherit';
            }
        });
    };
    NavItemComponent.prototype.hasActiveChildren = function () {
        var activeChildren = this.rootElem.querySelector('sub-nav-item[link="' + location.pathname + '"]');
        return activeChildren !== null;
    };
    NavItemComponent.prototype.isAsideFolded = function () {
        var foldedElem = document.querySelector('.app.app-aside-folded');
        var isAsideFolded = foldedElem ? true : false;
        if (!isAsideFolded) {
            return false;
        }
        var classList = foldedElem.className.split(/\s+/);
        if (classList.indexOf('off-screen') >= 0) {
            var clientWidth = document.body.clientWidth;
            if (clientWidth < 768) {
                return false;
            }
        }
        return true;
    };
    NavItemComponent.prototype.checkChild = function () {
        var child = this.elemRef.nativeElement.querySelector('sub-nav-item');
        //console.info('child',child);
        if (child) {
            this.haveChild = true;
        }
    };
    /**
     * 元素是否包含某个类
     * @param elem
     * @param className
     * @returns {boolean}
       */
    NavItemComponent.prototype.hasClass = function (elem, className) {
        var classList = elem.className.split(/\s+/);
        return classList.indexOf(className) >= 0;
    };
    /**
     * 为元素添加一个类
     * @param elem
     * @param className
       */
    NavItemComponent.prototype.addClass = function (elem, className) {
        var classList = elem.className.split(/\s+/);
        if (classList.indexOf(className) < 0) {
            classList.push(className);
            elem.className = classList.join(' ');
        }
    };
    /**
     * 删除某个类
     * @param elem
     * @param className
       */
    NavItemComponent.prototype.removeClass = function (elem, className) {
        var classList = elem.className.split(/\s+/);
        var clsIndex = classList.indexOf(className);
        if (clsIndex >= 0) {
            classList.splice(clsIndex, 1);
            elem.className = classList.join(' ');
        }
    };
    return NavItemComponent;
}());
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], NavItemComponent.prototype, "icon", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", String)
], NavItemComponent.prototype, "text", void 0);
__decorate([
    core_1.Input(),
    __metadata("design:type", Object)
], NavItemComponent.prototype, "link", void 0);
__decorate([
    core_1.Input('badge-class'),
    __metadata("design:type", String)
], NavItemComponent.prototype, "badgeClass", void 0);
__decorate([
    core_1.Input('badge-value'),
    __metadata("design:type", Object)
], NavItemComponent.prototype, "badgeValue", void 0);
NavItemComponent = __decorate([
    core_1.Component({
        selector: 'nav-item',
        templateUrl: './nav-item.component.html',
        styleUrls: ['./nav-item.component.less']
    }),
    __metadata("design:paramtypes", [core_1.ElementRef, router_1.Router])
], NavItemComponent);
exports.NavItemComponent = NavItemComponent;
//# sourceMappingURL=nav-item.component.js.map