"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var DatePickerDirective = (function () {
    function DatePickerDirective(elemRef) {
        this.elemRef = elemRef;
        this.ngModelChange = new core_1.EventEmitter();
        this.complete = new core_1.EventEmitter(); //选择完成的回调
    }
    DatePickerDirective.prototype.ngOnInit = function () {
        var _this = this;
        //laydate.v   //获取laydate版本号
        //laydate.skin(lib);  //加载皮肤，参数lib为皮肤名
        /*
         laydate.now支持多类型参数。timestamp可以是前后若干天，也可以是一个时间戳。format为日期格式，为空时则采用默认的“-”分割。
         如laydate.now(-2)将返回前天，laydate.now(3999634079890)将返回2096-09-28
         */
        //laydate.now(timestamp, format);   //该方法提供了丰富的功能，推荐灵活使用。
        // laydate.reset();  //重设日历控件坐标，一般用于页面dom结构改变时。无参
        var options = {
            elem: this.elemRef.nativeElement,
            event: this.event || 'click',
            format: this.format || ('YYYY-MM-DD' + (this.isPickTime ? ' hh:mm' : '')),
            istime: this.isPickTime || false,
            isclear: this.isShowClearButton !== undefined ? this.isShowClearButton : true,
            istoday: this.isShowTodayButton !== undefined ? this.isShowTodayButton : true,
            issure: this.isShowSureButton !== undefined ? this.isShowSureButton : true,
            festival: this.isShowFestival !== undefined ? this.isShowFestival : true,
            min: this.min || '',
            max: this.max || '',
            start: this.start || '',
            end: this.end || '',
            fixed: this.isFixed || false,
            zIndex: this.zIndex !== undefined ? this.zIndex : 99999999,
            choose: function (dates) {
                _this.ngModelChange.emit(dates);
                _this.complete.emit(dates);
            }
        };
        laydate(options);
    };
    DatePickerDirective.prototype.ngOnDestroy = function () {
    };
    return DatePickerDirective;
}());
__decorate([
    core_1.Input('datePicker'),
    __metadata("design:type", String)
], DatePickerDirective.prototype, "value", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DatePickerDirective.prototype, "ngModelChange", void 0);
__decorate([
    core_1.Input('opt-event'),
    __metadata("design:type", String)
], DatePickerDirective.prototype, "event", void 0);
__decorate([
    core_1.Input('opt-format'),
    __metadata("design:type", String)
], DatePickerDirective.prototype, "format", void 0);
__decorate([
    core_1.Input('opt-ispicktime'),
    __metadata("design:type", Boolean)
], DatePickerDirective.prototype, "isPickTime", void 0);
__decorate([
    core_1.Input('opt-isclearbtn'),
    __metadata("design:type", Boolean)
], DatePickerDirective.prototype, "isShowClearButton", void 0);
__decorate([
    core_1.Input('opt-istodaybtn'),
    __metadata("design:type", Boolean)
], DatePickerDirective.prototype, "isShowTodayButton", void 0);
__decorate([
    core_1.Input('opt-issurebtn'),
    __metadata("design:type", Boolean)
], DatePickerDirective.prototype, "isShowSureButton", void 0);
__decorate([
    core_1.Input('opt-festival'),
    __metadata("design:type", Boolean)
], DatePickerDirective.prototype, "isShowFestival", void 0);
__decorate([
    core_1.Input('opt-min'),
    __metadata("design:type", String)
], DatePickerDirective.prototype, "min", void 0);
__decorate([
    core_1.Input('opt-max'),
    __metadata("design:type", String)
], DatePickerDirective.prototype, "max", void 0);
__decorate([
    core_1.Input('opt-start'),
    __metadata("design:type", String)
], DatePickerDirective.prototype, "start", void 0);
__decorate([
    core_1.Input('opt-end'),
    __metadata("design:type", String)
], DatePickerDirective.prototype, "end", void 0);
__decorate([
    core_1.Input('opt-fixed'),
    __metadata("design:type", Boolean)
], DatePickerDirective.prototype, "isFixed", void 0);
__decorate([
    core_1.Input('opt-zindex'),
    __metadata("design:type", Number)
], DatePickerDirective.prototype, "zIndex", void 0);
__decorate([
    core_1.Output(),
    __metadata("design:type", core_1.EventEmitter)
], DatePickerDirective.prototype, "complete", void 0);
DatePickerDirective = __decorate([
    core_1.Directive({
        selector: '[datePicker]'
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], DatePickerDirective);
exports.DatePickerDirective = DatePickerDirective;
//# sourceMappingURL=datePicker.directive.js.map